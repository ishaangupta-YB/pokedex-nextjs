import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Utility to get type-specific colors/classes
// Note: You might need to ensure these gradient classes are generated by Tailwind.
// If not, you might need to use inline styles with hex codes or safelist them in tailwind.config.js
interface TypeColor {
  gradientFrom: string;
  gradientTo: string;
  badgeBackground: string;
  badgeText: string;
  progressIndicator: string;
  // Hex codes as fallback or for inline styles
  bgHex: string;
  borderHex: string;
  textHex: string;
}

export const getTypeColor = (type: string): TypeColor => {
  switch (type.toLowerCase()) {
    case 'grass': return { gradientFrom: 'from-green-400', gradientTo: 'to-green-600', badgeBackground: 'bg-green-100', badgeText: 'text-green-800', progressIndicator: 'bg-green-500', bgHex: '#78C850', borderHex: '#A7DB8D', textHex: '#2E5A1F' };
    case 'fire': return { gradientFrom: 'from-red-500', gradientTo: 'to-orange-500', badgeBackground: 'bg-red-100', badgeText: 'text-red-800', progressIndicator: 'bg-red-500', bgHex: '#F08030', borderHex: '#FAD1AF', textHex: '#8D4A1B' };
    case 'water': return { gradientFrom: 'from-blue-400', gradientTo: 'to-blue-600', badgeBackground: 'bg-blue-100', badgeText: 'text-blue-800', progressIndicator: 'bg-blue-500', bgHex: '#6890F0', borderHex: '#B3C9F7', textHex: '#3F5891' };
    case 'bug': return { gradientFrom: 'from-lime-400', gradientTo: 'to-lime-600', badgeBackground: 'bg-lime-100', badgeText: 'text-lime-800', progressIndicator: 'bg-lime-500', bgHex: '#A8B820', borderHex: '#D8E084', textHex: '#5D6711' };
    case 'normal': return { gradientFrom: 'from-gray-400', gradientTo: 'to-gray-500', badgeBackground: 'bg-gray-100', badgeText: 'text-gray-800', progressIndicator: 'bg-gray-400', bgHex: '#A8A878', borderHex: '#D8D8C0', textHex: '#5D5D44' };
    case 'poison': return { gradientFrom: 'from-purple-500', gradientTo: 'to-purple-700', badgeBackground: 'bg-purple-100', badgeText: 'text-purple-800', progressIndicator: 'bg-purple-600', bgHex: '#A040A0', borderHex: '#D192D1', textHex: '#582458' };
    case 'electric': return { gradientFrom: 'from-yellow-400', gradientTo: 'to-yellow-500', badgeBackground: 'bg-yellow-100', badgeText: 'text-yellow-800', progressIndicator: 'bg-yellow-400', bgHex: '#F8D030', borderHex: '#FBE990', textHex: '#8E751B' };
    case 'ground': return { gradientFrom: 'from-amber-600', gradientTo: 'to-yellow-700', badgeBackground: 'bg-yellow-100', badgeText: 'text-yellow-900', progressIndicator: 'bg-yellow-600', bgHex: '#E0C068', borderHex: '#EFDBAB', textHex: '#7D6A39' };
    case 'fairy': return { gradientFrom: 'from-pink-300', gradientTo: 'to-pink-500', badgeBackground: 'bg-pink-100', badgeText: 'text-pink-800', progressIndicator: 'bg-pink-400', bgHex: '#EE99AC', borderHex: '#F8CDD8', textHex: '#885460' };
    case 'fighting': return { gradientFrom: 'from-red-700', gradientTo: 'to-orange-800', badgeBackground: 'bg-orange-100', badgeText: 'text-orange-900', progressIndicator: 'bg-orange-700', bgHex: '#C03028', borderHex: '#E3928D', textHex: '#6C1A16' };
    case 'psychic': return { gradientFrom: 'from-pink-500', gradientTo: 'to-purple-600', badgeBackground: 'bg-pink-100', badgeText: 'text-pink-900', progressIndicator: 'bg-pink-500', bgHex: '#F85888', borderHex: '#FCADCA', textHex: '#8E314D' };
    case 'rock': return { gradientFrom: 'from-stone-500', gradientTo: 'to-stone-700', badgeBackground: 'bg-stone-100', badgeText: 'text-stone-800', progressIndicator: 'bg-stone-600', bgHex: '#B8A038', borderHex: '#DBCB8F', textHex: '#67591E' };
    case 'ghost': return { gradientFrom: 'from-indigo-500', gradientTo: 'to-purple-800', badgeBackground: 'bg-indigo-100', badgeText: 'text-indigo-900', progressIndicator: 'bg-indigo-600', bgHex: '#705898', borderHex: '#B9ADC9', textHex: '#3E3054' };
    case 'ice': return { gradientFrom: 'from-cyan-300', gradientTo: 'to-blue-400', badgeBackground: 'bg-cyan-100', badgeText: 'text-cyan-800', progressIndicator: 'bg-cyan-400', bgHex: '#98D8D8', borderHex: '#D1EDED', textHex: '#547979' };
    case 'dragon': return { gradientFrom: 'from-indigo-600', gradientTo: 'to-red-700', badgeBackground: 'bg-indigo-100', badgeText: 'text-indigo-900', progressIndicator: 'bg-indigo-600', bgHex: '#7038F8', borderHex: '#B99CFB', textHex: '#3E1FC0' };
    case 'dark': return { gradientFrom: 'from-neutral-700', gradientTo: 'to-neutral-900', badgeBackground: 'bg-neutral-100', badgeText: 'text-neutral-800', progressIndicator: 'bg-neutral-600', bgHex: '#705848', borderHex: '#B9AD9F', textHex: '#3E3026' };
    case 'steel': return { gradientFrom: 'from-slate-400', gradientTo: 'to-slate-600', badgeBackground: 'bg-slate-100', badgeText: 'text-slate-800', progressIndicator: 'bg-slate-500', bgHex: '#B8B8D0', borderHex: '#DBDBE8', textHex: '#676777' };
    case 'flying': return { gradientFrom: 'from-sky-400', gradientTo: 'to-indigo-400', badgeBackground: 'bg-sky-100', badgeText: 'text-sky-800', progressIndicator: 'bg-sky-500', bgHex: '#A890F0', borderHex: '#D8CFF7', textHex: '#5D5091' };
    default: return { gradientFrom: 'from-gray-400', gradientTo: 'to-gray-500', badgeBackground: 'bg-gray-100', badgeText: 'text-gray-800', progressIndicator: 'bg-gray-400', bgHex: '#A8A878', borderHex: '#D8D8C0', textHex: '#5D5D44' }; // Default to normal
  }
};

// Extend Progress component props if needed to accept custom indicator color class
declare module "@/components/ui/progress" {
  interface ProgressProps extends React.HTMLAttributes<HTMLDivElement> {
    indicatorClassName?: string;
  }
} 